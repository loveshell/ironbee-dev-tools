#! /usr/bin/env python
import os
import sys
import random
import signal
import subprocess
from optparse import OptionParser

class Main( object ) :
    def __init__( self ) :
        self._parser = OptionParser(
            usage="usage: %prog [options]",
            version="%prog 0.1" )

    def Setup( self ) :

        self._parser.set_defaults( alarm=1.0 )
        self._parser.add_option( "--timeout", "-t",
                                 action="store", dest="alarm", type="float",
                                 help="Set curl alarm timeout <1.0>" )

        self._parser.set_defaults( urls=10 )
        self._parser.add_option( "--urls", "-u",
                                 action="store", dest="urls", type="int",
                                 help="Specify # of URLs to pass to curl <10>" )

        self._parser.set_defaults( url_timeout=1.0 )
        self._parser.add_option( "--url-timeout", "--ut",
                                 action="store", dest="url_timeout",
                                 type="float",
                                 help="Specify # alarm increment / URL <1.0>" )

        self._parser.set_defaults( loops=10 )
        self._parser.add_option( "--loops", "-l",
                                 action="store", dest="urls", type="int",
                                 help="Specify # of execution loops <10>" )

        self._parser.set_defaults( output = "/dev/null" )
        self._parser.add_option( "--no-output",
                                 action="store_const", dest="output", const="/dev/null",
                                 help="Specify output to /dev/null" )
        self._parser.add_option( "--stdout",
                                 action="store_const", dest="output", const=None,
                                 help="Specify output to /dev/stdout" )

        self._parser.set_defaults( execute = True )
        self._parser.add_option( "--execute",
                                 action="store_true", dest="execute",
                                 help="Enable execution <default>" )
        self._parser.add_option( "-n", "--no-execute",
                                 action="store_false", dest="execute",
                                 help="Disable execution (for test/debug)" )
        self._parser.set_defaults( verbose = 0 )
        self._parser.add_option( "-v", "--verbose",
                                 action="count", dest="verbose",
                                 help="Increment verbosity level" )
        self._parser.set_defaults( quiet=False )
        self._parser.add_option( "-q", "--quiet",
                                 action="store_true", dest="quiet",
                                 help="be vewwy quiet (I'm hunting wabbits)" )

    def Parse( self ) :
        (self._opt, self._args) = self._parser.parse_args()
        if len(self._args) > 0 :
            self._parser.error( "Unknown argument(s): '%s'" % (str(self._args)))

        if self._opt.output is None :
            self._out = None
        else :
            self._out = open(self._opt.output, "w")
        self._alarm = self._opt.alarm + \
                                ( self._opt.urls * self._opt.url_timeout )

    def Init( self ) :
        self._proxy = "localhost:8180"
        self._pages = (
            "http://pages.cs.wisc.edu/~nleroy/",
            "http://www.google.com",
            "http://www.ironbee.com",
            "http://www.qualys.com",
            )
        self.Setup( )
        self._p = None

    def Alarm(self, signum, frame) :
        if self._p is not None :
            print "Kill child", self._p.pid
            self._p.kill()

    def RunCurl( self ) :
        cmd = [ "curl", "-x", self._proxy ]
        if self._opt.verbose :
            cmd.append( "-v" )
        for n in range(self._opt.urls) :
            cmd.append( random.choice(self._pages) )
        signal.alarm( int(round(self._alarm)) )
        if not self._opt.execute :
            print "Not running:", cmd
        if self._opt.verbose :
            print "Running:", cmd
        if  self._opt.execute :
            if self._out is None :
                self._p = subprocess.Popen( cmd )
            else :
                self._p = subprocess.Popen( cmd, stdout=self._out )
        print "Child is", self._p.pid
        ret = self._p.wait( )
        signal.alarm(0)
        self._p = None
        if ret :
            print "Exit status is", ret
            sys.exit(ret)

    def Loop( self ) :
        signal.signal(signal.SIGALRM, self.Alarm)
        for run in range(self._opt.loops) :
            self.RunCurl( )


main = Main( )
main.Init( )
main.Parse( )
main.Loop( )
